$(document).ready(function() {
    // Define parsing of URLs for use in Twitter and Facebook feed
    var parseURLs = function(text) {
        // Using URL Regex matcher from http://daringfireball.net/2010/07/improved_regex_for_matching_urls reformatted for JS
        var urlRegex = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/gi;
        return text.replace(urlRegex, function(url) {
            return '<a href="' + url + '" target="_blank">' + url + '</a>';
        });
    }

    // Connect to Twitter RSS Feed, store tweets in array, then create HTML from tweets
    var tweets = []
    var twitterFeed = "https://zapier.com/engine/rss/666501/ZipCodeTwitter/";
    var linkIncludedRegex = /https:\/\/t[.]co\/[a-zA-Z0-9_-]+$/i;
    $.ajax(twitterFeed, {
        accepts: {
            xml: "application/rss+xml"
        },
        dataType: "xml",
        success: function(data) {
            var twitterArray = $(data).find("item").slice(0,2);
            // This variable is declared in case there is less than 2 items in the array
            var twitterArrayLength = twitterArray.length;
            for (var i = 0; i < twitterArrayLength; i++) {
                var elDescription = $(twitterArray[i]).find('description').text().replace(/\n/g, " ");
                var elDate = elDescription.split('tweet_created_at:')[1].split('url_fields:')[0].trim();
                var elUrlFields = elDescription.split('url_fields:')[1].trim();
                if ( elUrlFields === '' ) {
                    // Avoid errors if Zapier feed was set up with entities_urls parent placeholder instead of children placeholders and no URL is present
                    var tweetElm = {
                        description: elDescription.split('tweet_created_at:')[0].split('tweet_message:')[1].trim(),
                        createdAt: new Date(elDate),
                        createdAtString: elDate.split(' ').slice(1,3).join(' '),
                        linkDisplayURL: '',
                        linkURL: ''
                    }
                } else {
                    // If the children placeholders were used, the given parsing formula will return empty strings for linkDisplayURL and linkURL if there is no link in the tweet
                    var tweetElm = {
                        description: elDescription.split('tweet_created_at:')[0].split('tweet_message:')[1].trim(),
                        createdAt: new Date(elDate),
                        createdAtString: elDate.split(' ').slice(1,3).join(' '),
                        linkDisplayURL: elUrlFields.split('display_url:')[1].split('expanded_url:')[0].trim(),
                        linkURL: elUrlFields.split('expanded_url:')[1].split('indices:')[0].trim()
                    };
                }
                // Remove Twitter-generated URL for linked entity if it is present. The URLs for linked items are brought in with the linkURL and the linkDisplayURL properties, which offer more descriptive URLs for the user.
                tweetElm.description = tweetElm.description.replace(linkIncludedRegex, '').trim();
                tweets.push(tweetElm);
            }
            createTwitterFeed(parseTweetTextLinks(tweets));
        }
    });
    
    // Define HTML creation of tweets
    var createTwitterFeed = function(tweets) {
        for (var i = 0; i < tweets.length; i++) {
            // Ternary expression inside of append only creates the space for the link URL if the tweet has a link to put onto page
            $('#twitter-container').append('<div class="tweet-container"><a href="//twitter.com/techladder" target="_blank"><span class="twitter-name">Tech Ladder</span> <span class="twitter-handle">@techladder</span></a> <span class="tweet-date">' + tweets[i].createdAtString + '</span><p>' + tweets[i].description + (tweets[i].linkURL != '' ? '<br/><a href="' + tweets[i].linkURL + '" target="_blank" rel="noopener noreferrer">' + tweets[i].linkDisplayURL + '</a></div>' : '') + '</p>');  
        }
        // Resize any emojis brought in with text to size of text itself 
        for (var j = 0; j < $('.tweet-container').length; j++) {
            $($('.tweet-container')[j]).children('p').find('img.Emoji').css('maxHeight', '1rem');
        }
    }

    // Define generation of links for URLs, hashtags, and user mentions
    var parseTweetTextLinks = function(tweets) {
        var hashtagRegex = /\B#[a-zA-Z0-9_]+/g;
        var usernameRegex = /\B@[a-zA-Z0-9_]+/g;
        for (var i = 0; i < tweets.length; i++) {
            // Need to replace URLs in text first, to avoid replacing URLs inside HTML generated by the hashtag and username parsers
            tweets[i].description = parseURLs(tweets[i].description);
            tweets[i].description = tweets[i].description.replace(hashtagRegex, function(hashtag) {
                return '<a href="https://www.twitter.com/hashtag/' + hashtag.slice(1, hashtag.length) + '?src=hash" target="_blank">' + hashtag + '</a>';
            });
            tweets[i].description = tweets[i].description.replace(usernameRegex, function(username) {
                return '<a href="https://www.twitter.com/' + username.slice(1, username.length) + '" target="_blank">' + username + '</a>';
            });
        };
        return tweets;
    };

    // Connect to Instagram RSS Feed, store items in array, then create HTML from items
    var instagramPosts = [];
    var instagramFeed = "https://zapier.com/engine/rss/666501/instazip/";
    $.ajax(instagramFeed, {
        accepts: {
            xml:"application/rss+xml"
        },
        dataType:"xml",
        success: function(data) {
            var instagramArray = $(data).find("item").slice(0,6);
            // This variable is declared in case the RSS feed has less than 6 items in it
            var instagramArrayLength = instagramArray.length;
            for (var i = 0; i < instagramArrayLength; i++) {
                var elDescriptionArray = $(instagramArray[i]).find('description').text().split('image: ');
                var instaElm = {
                    imgUrl: elDescriptionArray[1],
                    linkOut: elDescriptionArray[0].split('link: ')[1]
                }
                instagramPosts.push(instaElm);
            }
            createInstagramFeed(instagramPosts);
        }
    });
    
    // Write script to create Instagram feed on page
    var createInstagramFeed = function(instagramPosts) {
        var instagramPostsLength = instagramPosts.length;
        for (var i = 0; i < instagramPostsLength; i++) {
        	// The img tag inside of the div is only used to trigger the onerror event for any deleted posts, because background images do not have an onerror event equivalent, and the image for a working post needs to be displayed as a background image to ensure size uniformity.
            $('#instafeed').append('<div class="instafeed-six"><img src="' + instagramPosts[i].imgUrl + '" style="display: none; visibility: hidden;" onerror="$(this).parent().addClass(' + "'error'" + ')" onload="$(this).parent().addClass(' + "'success'" + ')"><a href="' + instagramPosts[i].linkOut + '"><div class="instafeed-inner" style="background-image: url(' + instagramPosts[i].imgUrl + ')"></div></a></div>');
        };
    };

    var removeExtraInstagramPosts = function() {
    	var numOfErrors = $('.instafeed-six.error', '#instafeed').length;
    	console.log($('.instafeed-six').length);
        var numOfSuccesses = $('.instafeed-six.success', '#instafeed').length;
        var numOfExtras = numOfSuccesses - 3;
        if (numOfExtras > 0) {
        	for (var i = 0; i < numOfExtras; i++) {
        		$('.instafeed-six.success', '#instafeed').last().remove();
        	}
        }
    }

    // Connect to Facebook RSS Feed and create HTML from first item
    var facebookFeed = "https://zapier.com/engine/rss/666501/zipcodefacebook/";
    var longMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    $.ajax(facebookFeed, {
        accepts: {
            xml: "application/rss+xml"
        },
        dataType: "xml",
        success: function(data) {
            var elDescriptionArray = $(data).find("item").first().find('description').text().split('created_time:');
            // Get rid of all information past and including the plus sign, to account for Safari's Date parser
            var elDescriptionDate = elDescriptionArray[1].trim().split('+')[0];

            var elDescriptionDateArray = elDescriptionArray[1].trim().split('+')[0].split('T');
            var elDescriptionTime = elDescriptionDateArray[1].split(':');

            // var elDescriptionDateArray = new Date(elDescriptionDate).toString().split(' ');
            // var elDescriptionTime = elDescriptionDateArray[4].split(':');
            var facebookElm = {
                // Replace new line characters with HTML <br> tags to preserve formatting of post. Substring of "8" trims off the "message:" piece of the RSS feed
                message: elDescriptionArray[0].substring(8).trim().replace(/\n/g, '<br>'),
                createdAtDayNum: parseInt(elDescriptionDateArray[0].split('-')[2]).toString(),
                createdAtLongMonth: longMonths[parseInt(elDescriptionDate.split('-')[1]) - 1],
                createdAtTime: elDescriptionTime[0] + ':' + elDescriptionTime[1],
                createdAtPM: false
            }
            var createdAtHour = parseInt(elDescriptionTime[0]);
            if (createdAtHour > 12) {
                facebookElm.createdAtTime = (createdAtHour % 12).toString() + ':' + elDescriptionTime[1];
                facebookElm.createdAtPM = true;
            } else if (createdAtHour === 12) {
                facebookElm.createdAtTime = '12:' + elDescriptionTime[1];
                facebookElm.createdAtPM = true;
            } else if (createdAtHour === 0) {
                facebookElm.createdAtTime = '12:' + elDescriptionTime[1];
            }
            facebookElm.message = parseURLs(facebookElm.message);
            createFacebookFeed(facebookElm);
        }
    })

    // Define creation of HTML elements from Facebook post
    var createFacebookFeed = function(facebookPost) {
        $('#fb-root').append('<a href="//www.facebook.com/techladder" class="facebook-name">Tech Ladder</a><p class="facebook-date">' + facebookPost.createdAtLongMonth + ' ' + facebookPost.createdAtDayNum + ' at ' + facebookPost.createdAtTime + (facebookPost.createdAtPM ? 'pm' : 'am') + '</p><p class="facebook-content">' + facebookPost.message + '</p>');
    }
})